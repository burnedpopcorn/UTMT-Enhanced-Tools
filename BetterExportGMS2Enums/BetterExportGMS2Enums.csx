/*
	BetterExportGMS2Enums
		Improved by burnedpopcorn
	
	I actually don't know who made this original file
	But it needed Improvements, since it could only decompile the Unknown Enums
	
	also, this is a UnderAnalyzer only Script, because only UnderAnaylzer uses these Enums
	
	Changes:
		- Added ability to detect and add e__VW and e__BG Enums (Usually used for GMS1 Compatiablity Scripts)
		- Notify user to turn off Create Enum Declarations in Settings (THIS IS IMPORTANT FOR DECOMPILATIONS)
		- Removed ability to report Decompiling Errors, because it often didn't mean anything, and just flooded your screen with useless errors
		
	If there are more Enums than the Unknown, e__VW and e__BG ones, please dm me on Discord (burnedpopcorn180)
*/

// Use UA Libraries and shit
using Underanalyzer;
using Underanalyzer.Decompiler;
using Underanalyzer.Decompiler.AST;
using Underanalyzer.Decompiler.GameSpecific;
using Underanalyzer.Decompiler.ControlFlow;
using System.Threading.Tasks;
using System.Collections.Generic;

// ensure data.win file is loaded
EnsureDataLoaded();

// Notify User that they NEED to turn off Create Enum Declarations in Settings
if (ScriptQuestion("This Script is supposed to be used when Decompiling a Project\nRemember when Decompiling a Project, you HAVE to turn off 'Create Enum Declartions' in Settings\nIf you forgot to do that while decompiling, re-decompile the project, then come back to use this Script\nPress YES to Continue, and Press NO to leave") == false) {return;} // End Execution if user clicks no

// path to output script
string codePath = Path.GetDirectoryName(FilePath) + Path.DirectorySeparatorChar + "scr_enums.gml";

// Setup UA Settings
GlobalDecompileContext globalDecompileContext = new(Data);
DecompileSettings decompilerSettings = new DecompileSettings();
decompilerSettings.MacroDeclarationsAtTop = true;
decompilerSettings.CreateEnumDeclarations = true;

// Unknown Enum stuff
string enumName = Data.ToolInfo.DecompilerSettings.UnknownEnumName;
decompilerSettings.UnknownEnumName = enumName;
decompilerSettings.UnknownEnumValuePattern = Data.ToolInfo.DecompilerSettings.UnknownEnumValuePattern;

// bools that are used when adding other enums to list
bool VW_was_added = false;
bool BG_was_added = false;

// idk what this is
HashSet<long> values = new HashSet<long>();

// For Progress Bar
List<UndertaleCode> toDump = new();
foreach (UndertaleCode code in Data.Code) {
	if (code.ParentEntry is null) {
		toDump.Add(code);
	}
}

// Start Progress Bar
SetProgressBar(null, "Searching for Enum Declarations in all Scripts...", 0, toDump.Count);
StartProgressBarUpdater();

// Call Dump Unknown Enum Declaration Function
await DumpCode();

// Stop Progress Bar once Previous Function finishes
await StopProgressBarUpdater();
HideProgressBar();

// https://github.com/UnderminersTeam/Underanalyzer/blob/main/Underanalyzer/Decompiler/AST/Nodes/EnumDeclNode.cs
List<long> sorted = new List<long>(values);
sorted.Sort((a, b) => Math.Sign(a - b));

// Adding Unknown Enums to the List
string code = "// Script Generated by BetterExportGMS2Enums.csx\n\n// If this is still here, whoever made this Decompilation is lazy as fuck\n// So to the Decompiler, remove this text, and move the Enum Declarations to somewhere else within the project, like obj_player or something\n" + "\nenum " + enumName + " {\n";
long expectedValue = 0;
foreach (long val in sorted) {
	string name = string.Format(decompilerSettings.UnknownEnumValuePattern, val.ToString().Replace("-", "m"));
	if (val == expectedValue) {
		code += "	" + name + ",\n";
		if (expectedValue != long.MaxValue) {
			expectedValue++;
		}
	} else {
		code += "	" + name + " = " + val.ToString() + ",\n";
		if (expectedValue != long.MaxValue) {
			expectedValue = val + 1;
		} else {
			expectedValue = val;
		}
	}
}
code += "}";

// Write Unknown Enms to output file (scr_enum.gml)
File.WriteAllText(codePath, code);

// Check for other Enums like e__VW and e__BG enums
// yes we're doing this after the file has already been made and written to
// i dont care
await Check_Other_Enums();

// notify user that script is finished
ScriptMessage("Exported to: " + codePath);

// For Progress Bar, and to allow Decompiler to do its job and find Unknown Enums
async Task DumpCode()
{
	if (Data.GlobalFunctions is null) {
		SetProgressBar(null, "Building the cache of all global functions...", 0, 0);
		await Task.Run(() => GlobalDecompileContext.BuildGlobalFunctionCache(Data));
		SetProgressBar(null, "Code Entries", 0, toDump.Count);
	}
	await Task.Run(() => Parallel.ForEach(toDump, DumpCode));
}

// Check all Code Entries for Unknown Enums
void DumpCode(UndertaleCode code)
{
    if (code is not null)
    {
        try
        {
			if (code != null) {
				var context = new DecompileContext(globalDecompileContext, code, decompilerSettings);
				BlockNode rootBlock = (BlockNode)context.DecompileToAST();
				foreach (IStatementNode stmt in rootBlock.Children) {
					if (stmt is EnumDeclNode decl && decl.Enum.Name == enumName) {
						foreach (GMEnumValue val in decl.Enum.Values) {
							values.Add(val.Value);
						}
					}
				}
			}
        }
        catch (Exception e)
        {
			// Give Error Message when a script fails to decompile
			//ScriptMessage("Error while decompiling " + code.Name.Content + ": " + e.ToString());
			
			// not gonna add it back, since it works fine even if some scripts dont decompile
			// aka, removing it so it doesn't flood your screen with errors, since said errors don't mean shit
        }
    }

    IncrementProgressParallel();
	
}

// Custom shit, custom shit all the way down

// Add e__VW Enum Declaration to List Function
void Add_e__VW_ENUMS() {
// if statement to only add it to the list ONCE
	if (VW_was_added == false) {
        using (StreamWriter sw = File.AppendText(codePath))
        {
			sw.WriteLine("");
			sw.WriteLine("");
            sw.WriteLine("enum e__VW {");
            sw.WriteLine("    XView,");
            sw.WriteLine("    YView,");
			sw.WriteLine("    WView,");
			sw.WriteLine("    HView,");
			sw.WriteLine("    Angle,");
			sw.WriteLine("    HBorder,");
			sw.WriteLine("    VBorder,");
			sw.WriteLine("    HSpeed,");
			sw.WriteLine("    VSpeed,");
			sw.WriteLine("    Object,");
			sw.WriteLine("    Visible,");
			sw.WriteLine("    XPort,");
			sw.WriteLine("    YPort,");
			sw.WriteLine("    WPort,");
			sw.WriteLine("    HPort,");
			sw.WriteLine("    Camera,");
			sw.WriteLine("    SurfaceID");
			sw.WriteLine("}");
        }
		// Mark as Added when added, so it wont add it again
		VW_was_added = true;
	}
}
// Add e__BG Enum Declaration to List Function
void Add_e__BG_ENUMS() {
// if statement to only add it to the list ONCE
	if (BG_was_added == false) {
        using (StreamWriter sw = File.AppendText(codePath))
        {
			sw.WriteLine("");
            sw.WriteLine("enum e__BG {");
            sw.WriteLine("    Visible,");
            sw.WriteLine("    Foreground,");
			sw.WriteLine("    Index,");
			sw.WriteLine("    X,");
			sw.WriteLine("    Y,");
			sw.WriteLine("    Width,");
			sw.WriteLine("    Height,");
			sw.WriteLine("    HTiled,");
			sw.WriteLine("    VTiled,");
			sw.WriteLine("    XScale,");
			sw.WriteLine("    YScale,");
			sw.WriteLine("    HSpeed,");
			sw.WriteLine("    VSpeed,");
			sw.WriteLine("    Blend,");
			sw.WriteLine("    Alpha");
			sw.WriteLine("}");
        }
		// Mark as Added when added, so it wont add it again
		BG_was_added = true;
	}
}

// Below is Search Function from Search.csx
// so thanks to whoever made it

// Allow void Check_Other_Enums to do its job
async Task Check_Other_Enums() {
	await Task.Run(() => Parallel.ForEach(Data.Code, Check_Other_Enums));
}

// Check if the Other Enum Declarations are in the Project, duh
void Check_Other_Enums(UndertaleCode code)
{
	// try + catch, because why not (plus it forces me to)
    try
    {
        if (code is not null && code.ParentEntry is null)
        {
            var lineNumber = 1;
			
			// Decompiled COde as Text
            StringReader decompiledText = new(code != null 
                ? new Underanalyzer.Decompiler.DecompileContext(globalDecompileContext, code, decompilerSettings).DecompileToString() 
                : "");
            bool nameWritten = false;
            string lineInt;
			
			// Check for these Enum Declarations in the Project
			string e__VW_Check = "enum e__VW";
			string e__BG_Check = "enum e__BG";
			
			// if line is not null, continue searching
            while ((lineInt = decompiledText.ReadLine()) is not null)
            {
                if (lineInt == string.Empty)
                {
					// if line is empty, search next line
                    lineNumber += 1;
                    continue;
                }
				
				if (lineInt.Contains(e__VW_Check)) {
					// If an Instance of e__VW Enum was found, add to list
					Add_e__VW_ENUMS();
				}
				
				if (lineInt.Contains(e__BG_Check)) {
					// If an Instance of e__BG Enum was found, add to list
					Add_e__BG_ENUMS();
				}
				// search next line when current line has been searched
                lineNumber += 1;
            }
        }
    }
    catch (Exception e) {
	// if things go bad, which it definitely will
	// don't remove this try + catch, unless you want thousands of errors
	
	// this script still works fine tho
	}
}